const path = require('path');
const { app, BrowserWindow } = require('electron');
const isDev = require('electron-is-dev');
const { PythonShell } = require('python-shell');

let pyProc = null;
let pyPort = '5000';

const createPyProc = () => {
  let script = path.join(__dirname, '../api', 'app.py');
  let pyOptions = {
    mode: 'text',
    pythonPath: isDev ? 'python' : path.join(__dirname, '../api', 'dist', 'api', 'api.exe'),
    pythonOptions: ['-u'], // unbuffered output
    scriptPath: isDev ? '' : path.join(__dirname, '../api')
  };

  pyProc = new PythonShell('app.py', pyOptions);

  pyProc.on('message', (message) => {
    console.log(message);
  });
};

const exitPyProc = () => {
  pyProc.end(() => {
    console.log('Python process finished');
  });
};

app.on('ready', createPyProc);
app.on('will-quit', exitPyProc);

function createWindow() {
  // ... existing window creation code
}

// ... rest of your electron.js file
Install required dependencies:

bash
npm install python-shell electron-is-dev
Package Python with PyInstaller:

First, package your Flask app:
bash
pip install pyinstaller
pyinstaller --onefile app.py
Move the generated executable to your Electron app's directory
Update the Python executable path in electron.js
Use a more comprehensive approach:
Here's a detailed implementation:

javascript
// electron.js
const path = require('path');
const { app, BrowserWindow } = require('electron');
const isDev = require('electron-is-dev');
const { spawn } = require('child_process');
const os = require('os');

let mainWindow;
let pyProc = null;

const getPythonScriptPath = () => {
  if (isDev) {
    return path.join(__dirname, '..', 'api', 'app.py');
  }
  if (os.platform() === 'win32') {
    return path.join(__dirname, '..', 'api', 'dist', 'app.exe');
  }
  return path.join(__dirname, '..', 'api', 'dist', 'app');
};

const createPyProc = () => {
  let script = getPythonScriptPath();
  
  if (isDev) {
    pyProc = spawn('python', [script]);
  } else {
    pyProc = spawn(script);
  }

  if (pyProc != null) {
    console.log('Python process started successfully');
    
    pyProc.stdout.on('data', (data) => {
      console.log(`stdout: ${data}`);
    });

    pyProc.stderr.on('data', (data) => {
      console.error(`stderr: ${data}`);
    });

    pyProc.on('close', (code) => {
      console.log(`Python process exited with code ${code}`);
    });
  }
};

const exitPyProc = () => {
  if (pyProc) {
    pyProc.kill();
    pyProc = null;
  }
};

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  });

  mainWindow.loadFile(path.join(__dirname, '../build/index.html'));
  
  mainWindow.on('closed', () => {
    mainWindow = null;
  });
}

app.whenReady().then(() => {
  createPyProc();
  createWindow();
});

app.on('window-all-closed', () => {
  exitPyProc();
  if (process.platform !== 'darwin') {
  app.quit();
  }
});

app.on('activate', () => {
  if (mainWindow === null) {
    createWindow();
  }
});

app.on('will-quit', exitPyProc);
Update your file structure:

your-app/
├── public/
│   └── electron.js
├── api/
│   ├── app.py
│   ├── requirements.txt
│   └── dist/
│       └── app.exe (or app for non-Windows)
├── src/
│   └── (React files)
├── build/
│   └── (React build output)
└── package.json
Build process:

First, build your Flask app:
bash
cd api
pip install -r requirements.txt
pyinstaller --onefile app.py
cd ..
Then build and package your Electron app:
bash
npm run build
npm run electron-pack
Update package.json:

json
{
  // ... other configurations
  "build": {
    "appId": "com.example.yourapp",
    "files": [
      "build/**/*",
      "api/**/*"
    ],
    "extraResources": [
      {
        "from": "api/dist",
        "to": "api/dist",
        "filter": ["**/*"]
      }
    ],
    "directories": {
      "buildResources": "assets"
    }
  }
}
