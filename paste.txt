npm install --save-dev electron electron-builder concurrently wait-on
npm install electron-is-dev

const path = require('path');
const { app, BrowserWindow } = require('electron');
const isDev = require('electron-is-dev');

function createWindow() {
  // Create the browser window.
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true
    }
  });

  // Load the index.html from a url
  win.loadURL(
    isDev
      ? 'http://localhost:3000'
      : `file://${path.join(__dirname, '../build/index.html')}`
  );
}

app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});



{
  "main": "public/electron.js",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "electron-dev": "concurrently \"BROWSER=none npm start\" \"wait-on http://localhost:3000 && electron .\"",
    "electron-pack": "electron-builder -c.extraMetadata.main=build/electron.js",
    "preelectron-pack": "npm run build"
  },
  "build": {
    "appId": "com.example.yourapp",
    "files": [
      "build/**/*",
      "node_modules/**/*"
    ],
    "directories": {
      "buildResources": "assets"
    }
  }
}
To run in development mode:

npm run electron-dev
To create an executable:

npm run electron-pack







First, update your public/electron.js to use CommonJS syntax throughout:
javascript
const path = require('path');
const { app, BrowserWindow } = require('electron');
const isDev = require('electron-is-dev');

function createWindow() {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  });

  win.loadURL(
    isDev
      ? 'http://localhost:3000'
      : `file://${path.join(__dirname, '../build/index.html')}`
  );

  // Optional: Open DevTools (comment out for production)
  // if (isDev) {
  //   win.webContents.openDevTools();
  // }
}

app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
Update your package.json:
json
{
  "name": "your-app-name",
  "version": "1.0.0",
  "private": true,
  "main": "public/electron.js",
  "dependencies": {
    "electron-is-dev": "^2.0.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3"
  },
  "devDependencies": {
    "electron": "^13.0.0",
    "electron-builder": "^22.11.7",
    "concurrently": "^6.2.0",
    "wait-on": "^6.0.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "electron-dev": "concurrently \"BROWSER=none npm start\" \"wait-on http://localhost:3000 && electron .\"",
    "electron-pack": "npm run build && electron-builder build --win -c.extraMetadata.main=build/electron.js",
    "postinstall": "electron-builder install-app-deps"
  },
  "build": {
    "appId": "com.example.your-app-name",
    "files": [
      "build/**/*",
      "node_modules/**/*"
    ],
    "directories": {
      "buildResources": "assets"
    },
    "win": {
      "target": "nsis"
    }
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
Make sure you have a .npmrc file in your project root with:
legacy-peer-deps=true
Clear your node_modules and reinstall dependencies:
bash
rm -rf node_modules
rm -rf build
rm -rf dist
npm install
Build your application:
bash
npm run electron-pack
If you're still experiencing issues, try these additional steps:

Check if any of your dependencies are using ES Modules and need to be handled differently. You might need to add them to the externals configuration.

Add a webpack.config.js file in your project root:

javascript
module.exports = {
  target: 'electron-main',
  externals: {
    // Add any problematic dependencies here
  }
};
If you're using Create React App, you might need to eject or use react-app-rewired to customize the webpack configuration.
If the issue persists, please try:

Downgrading Electron to a slightly older version:
bash
npm uninstall electron electron-builder
npm install --save-dev electron@13.1.7 electron-builder@22.11.7
Adding a .babelrc file:
json
{
  "presets": ["@babel/preset-env", "@babel/preset-react"],
  "plugins": ["@babel/plugin-transform-modules-commonjs"]
}
After making these changes, clean and rebuild:

bash
rm -rf node_modules
rm -rf build
rm -rf dist
npm install
npm run electron-pack
