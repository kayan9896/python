const path = require('path');
const { app, BrowserWindow } = require('electron');
const { PythonShell } = require('python-shell');
const isDev = require('electron-is-dev');

let pyProc = null;
let pyPort = 5000;

const startFlaskServer = () => {
  const script = isDev
    ? path.join(__dirname, '../flask_app/app.py')
    : path.join(process.resourcesPath, 'flask_app/app.py');

  const options = {
    mode: 'text',
    pythonPath: isDev ? 'python' : path.join(process.resourcesPath, 'python/python.exe'),
    pythonOptions: ['-u'],
    scriptPath: path.dirname(script),
  };

  pyProc = new PythonShell(path.basename(script), options);
  
  pyProc.on('message', function (message) {
    console.log(message);
  });
};

const createWindow = () => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  });

  win.loadFile(path.join(__dirname, '../build/index.html'));
};

app.whenReady().then(() => {
  startFlaskServer();
  createWindow();
});

app.on('window-all-closed', () => {
  if (pyProc != null) {
    pyProc.end(err => {
      if (err) console.error('Error terminating Flask server:', err);
    });
  }
  if (process.platform !== 'darwin') {
    app.quit();
  }
});
Update your package.json to include Python files in the build:
json
{
  "build": {
    "appId": "com.example.your-app",
    "files": [
      "build/**/*",
      "node_modules/**/*"
    ],
    "extraResources": [
      {
        "from": "flask_app",
        "to": "flask_app",
        "filter": ["**/*"]
      },
      {
        "from": "python_env",
        "to": "python",
        "filter": ["**/*"]
      }
    ]
  }
}
Create a Python virtual environment and install dependencies:
bash
python -m venv python_env
python_env\Scripts\activate  # On Windows
pip install flask pyinstaller
Package your Flask app: Create a script package_flask.js:
javascript
const { exec } = require('child_process');
const path = require('path');

const packageFlask = () => {
  const pyinstallerCommand = `pyinstaller --distpath ./python_env --workpath ./build/temp --clean -y --add-data "templates:templates" --add-data "static:static" flask_app/app.py`;
  
  exec(pyinstallerCommand, (error, stdout, stderr) => {
    if (error) {
      console.error(`Error: ${error}`);
      return;
    }
    console.log(`stdout: ${stdout}`);
    console.error(`stderr: ${stderr}`);
  });
};

packageFlask();
Update your build scripts in package.json:
json
{
  "scripts": {
    "package-flask": "node package_flask.js",
    "electron-pack": "npm run package-flask && npm run build && electron-builder"
  }
}
